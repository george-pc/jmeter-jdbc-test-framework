<?xml version="1.0" encoding="UTF-8"?>
<jmeterTestPlan version="1.2" properties="5.0" jmeter="5.6.3">
  <hashTree>
    <TestPlan guiclass="TestPlanGui" testclass="TestPlan" testname="Test-Plan-Maintain-variable-concurrency-as-per-threads_schedule">
      <boolProp name="TestPlan.tearDown_on_shutdown">true</boolProp>
      <elementProp name="TestPlan.user_defined_variables" elementType="Arguments" guiclass="ArgumentsPanel" testclass="Arguments" testname="User Defined Variables">
        <collectionProp name="Arguments.arguments">
          <elementProp name="JMETER_HOME" elementType="Argument">
            <stringProp name="Argument.name">JMETER_HOME</stringProp>
            <stringProp name="Argument.value">${__P(JMETER_HOME)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOSTNAME" elementType="Argument">
            <stringProp name="Argument.name">HOSTNAME</stringProp>
            <stringProp name="Argument.value">${__P(HOSTNAME,localhost)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PORT" elementType="Argument">
            <stringProp name="Argument.name">PORT</stringProp>
            <stringProp name="Argument.value">${__P(PORT,80)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="USER" elementType="Argument">
            <stringProp name="Argument.name">USER</stringProp>
            <stringProp name="Argument.value">${__P(USER,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="PASSWORD" elementType="Argument">
            <stringProp name="Argument.name">PASSWORD</stringProp>
            <stringProp name="Argument.value">${__P(PASSWORD,admin)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CATALOG" elementType="Argument">
            <stringProp name="Argument.name">CATALOG</stringProp>
            <stringProp name="Argument.value">${__P(CATALOG,glue)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DATABASE" elementType="Argument">
            <stringProp name="Argument.name">DATABASE</stringProp>
            <stringProp name="Argument.value">${__P(DATABASE,tpcds_1000_delta)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONNECTION_STRING" elementType="Argument">
            <stringProp name="Argument.name">CONNECTION_STRING</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
            <stringProp name="Argument.value">${__P(CONNECTION_STRING,&quot;jdbc:e6data://${HOSTNAME}:${PORT}/database=${DATABASE}&amp;catalog=${CATALOG})}</stringProp>
          </elementProp>
          <elementProp name="QUERY_PATH" elementType="Argument">
            <stringProp name="Argument.name">QUERY_PATH</stringProp>
            <stringProp name="Argument.value">${__P(QUERY_PATH,test_query.csv)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="CONCURRENT_QUERY_COUNT" elementType="Argument">
            <stringProp name="Argument.name">CONCURRENT_QUERY_COUNT</stringProp>
            <stringProp name="Argument.value">${__P(CONCURRENT_QUERY_COUNT,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="HOLD_PERIOD" elementType="Argument">
            <stringProp name="Argument.name">HOLD_PERIOD</stringProp>
            <stringProp name="Argument.value">${__P(HOLD_PERIOD,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QUERY_TIMEOUT" elementType="Argument">
            <stringProp name="Argument.name">QUERY_TIMEOUT</stringProp>
            <stringProp name="Argument.value">${__P(QUERY_TIMEOUT,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="LIMIT_RESULTSET" elementType="Argument">
            <stringProp name="Argument.name">LIMIT_RESULTSET</stringProp>
            <stringProp name="Argument.value">${__P(LIMIT_RESULTSET,100)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="MAX_CONCURRANCY" elementType="Argument">
            <stringProp name="Argument.name">MAX_CONCURRANCY</stringProp>
            <stringProp name="Argument.value">${__P(MAX_CONCURRANCY,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="REPORT_PATH" elementType="Argument">
            <stringProp name="Argument.name">REPORT_PATH</stringProp>
            <stringProp name="Argument.value">${__P(REPORT_PATH,&quot;/reports&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="DRIVER_CLASS" elementType="Argument">
            <stringProp name="Argument.name">DRIVER_CLASS</stringProp>
            <stringProp name="Argument.value">${__P(DRIVER_CLASS,&quot;io.e6.jdbc.driver.E6Driver&quot;)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="START_TIME" elementType="Argument">
            <stringProp name="Argument.name">START_TIME</stringProp>
            <stringProp name="Argument.value">${__P(START_TIME,${__time(yyyyMMdd-HHmmss)})}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP_TIME" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP_TIME</stringProp>
            <stringProp name="Argument.value">${__P(RAMP_UP_TIME,10)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RAMP_UP_STEPS" elementType="Argument">
            <stringProp name="Argument.name">RAMP_UP_STEPS</stringProp>
            <stringProp name="Argument.value">${__P(RAMP_UP_STEPS,3)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="QPS" elementType="Argument">
            <stringProp name="Argument.value">${__P(QPS,3)}</stringProp>
            <stringProp name="Argument.name">QPS</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
          <elementProp name="RECYCLE_ON_EOF" elementType="Argument">
            <stringProp name="Argument.name">RECYCLE_ON_EOF</stringProp>
            <stringProp name="Argument.value">${__P(RECYCLE_ON_EOF,false)}</stringProp>
            <stringProp name="Argument.metadata">=</stringProp>
          </elementProp>
        </collectionProp>
      </elementProp>
      <boolProp name="TestPlan.functional_mode">false</boolProp>
      <boolProp name="TestPlan.serialize_threadgroups">false</boolProp>
    </TestPlan>
    <hashTree>
      <ResultCollector guiclass="StatVisualizer" testclass="ResultCollector" testname="Aggregate Report">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${REPORT_PATH}/AggregateReport_${START_TIME}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <ResultCollector guiclass="SummaryReport" testclass="ResultCollector" testname="Summary Report" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>false</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>false</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename">${REPORT_PATH}/SummaryReport_${START_TIME}.csv</stringProp>
      </ResultCollector>
      <hashTree/>
      <JDBCDataSource guiclass="TestBeanGUI" testclass="JDBCDataSource" testname="JDBC Connection Configuration" enabled="true">
        <boolProp name="autocommit">true</boolProp>
        <stringProp name="checkQuery"></stringProp>
        <stringProp name="connectionAge">0</stringProp>
        <stringProp name="dataSource">jdbcConfig</stringProp>
        <stringProp name="dbUrl">${CONNECTION_STRING}</stringProp>
        <stringProp name="driver">${DRIVER_CLASS}</stringProp>
        <boolProp name="keepAlive">false</boolProp>
        <stringProp name="password">${PASSWORD}</stringProp>
        <stringProp name="poolMax">0</stringProp>
        <stringProp name="timeout">10000</stringProp>
        <stringProp name="transactionIsolation">DEFAULT</stringProp>
        <stringProp name="trimInterval">60000</stringProp>
        <stringProp name="username">${USER}</stringProp>
        <boolProp name="preinit">false</boolProp>
        <stringProp name="initQuery"></stringProp>
        <stringProp name="connectionProperties"></stringProp>
      </JDBCDataSource>
      <hashTree/>
      <CSVDataSet guiclass="TestBeanGUI" testclass="CSVDataSet" testname="CSV Data Set Config" enabled="true">
        <stringProp name="filename">${QUERY_PATH}</stringProp>
        <stringProp name="fileEncoding">US-ASCII</stringProp>
        <stringProp name="variableNames">QUERY_ALIAS,QUERY</stringProp>
        <boolProp name="ignoreFirstLine">false</boolProp>
        <stringProp name="delimiter">,</stringProp>
        <boolProp name="quotedData">true</boolProp>
        <stringProp name="recycle">${RECYCLE_ON_EOF}</stringProp>
        <boolProp name="stopThread">false</boolProp>
        <stringProp name="shareMode">shareMode.group</stringProp>
      </CSVDataSet>
      <hashTree/>
      <ConfigTestElement guiclass="PropertyControlGui" testclass="ConfigTestElement" testname="Property Display" enabled="true"/>
      <hashTree/>
      <SetupThreadGroup guiclass="SetupThreadGroupGui" testclass="SetupThreadGroup" testname="setUp Thread Group" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </SetupThreadGroup>
      <hashTree>
        <DebugSampler guiclass="TestBeanGUI" testclass="DebugSampler" testname="Debug-Sampler" enabled="false">
          <boolProp name="displayJMeterProperties">true</boolProp>
          <boolProp name="displayJMeterVariables">false</boolProp>
          <boolProp name="displaySystemProperties">false</boolProp>
        </DebugSampler>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor - Load UTG load profile" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import kg.apc.jmeter.threads.UltimateThreadGroup
import org.apache.jmeter.testelement.TestPlan
import org.apache.jmeter.testelement.property.CollectionProperty
import org.apache.jmeter.testelement.property.IntegerProperty

def csvPath = vars.get(&quot;UTG_LOAD_PROFILE&quot;) ?: &quot;test_properties/utg_load_profile.csv&quot;
File file = new File(csvPath)

if (!file.exists()) {
    log.error(&quot;❌ CSV file not found: $csvPath&quot;)
    return
}

List&lt;String&gt; lines = file.readLines()
def headers = lines[0].split(&quot;,&quot;).collect { it.trim() }

def schedule = new CollectionProperty(&quot;UltimateThreadGroup.schedule&quot;, new java.util.Vector())

lines.drop(1).eachWithIndex { line, idx -&gt;
    def parts = line.split(&quot;,&quot;).collect { it.trim() }
    if (parts.size() == 5) {
        def row = new CollectionProperty(&quot;row${idx}&quot;, new java.util.Vector())
        row.addItem(new IntegerProperty(headers[0], parts[0] as int))
        row.addItem(new IntegerProperty(headers[1], parts[1] as int))
        row.addItem(new IntegerProperty(headers[2], parts[2] as int))
        row.addItem(new IntegerProperty(headers[3], parts[3] as int))
        row.addItem(new IntegerProperty(headers[4], parts[4] as int))
        schedule.addItem(row)
    } else {
        log.warn(&quot;⚠️ Skipping malformed line: $line&quot;)
    }
}

// Apply to UTG(s) in test plan
def testPlan = ctx.getEngine().getTestPlan()
testPlan.traverse { element -&gt;
    if (element instanceof UltimateThreadGroup) {
        element.setData(schedule)
        log.info(&quot;✅ Load profile applied to UTG: ${element.getName()}&quot;)
    }
}</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223Sampler guiclass="TestBeanGUI" testclass="JSR223Sampler" testname="JSR223 Sampler" enabled="false">
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="script">import kg.apc.jmeter.threads.UltimateThreadGroup
import org.apache.jmeter.testelement.property.CollectionProperty
import org.apache.jmeter.testelement.property.IntegerProperty

// Load CSV path
def csvPath = vars.get(&quot;UTG_LOAD_PROFILE&quot;) ?: &quot;test_properties/utg_load_profile.csv&quot;
csvPath = csvPath.replaceAll(/^[&quot;&apos;]|[&quot;&apos;]$/, &apos;&apos;).trim()

def file = new File(csvPath)
if (!file.exists()) {
    log.error(&quot;❌ CSV file not found: $csvPath&quot;)
    return
}

def lines = file.readLines()
def headers = lines[0].split(&quot;,&quot;).collect { it.trim() }

def schedule = new CollectionProperty(&quot;UltimateThreadGroup.schedule&quot;, new java.util.Vector())

lines.drop(1).eachWithIndex { line, idx -&gt;
    def parts = line.split(&quot;,&quot;).collect { it.trim() }
    if (parts.size() == 5) {
        def row = new CollectionProperty(&quot;row${idx}&quot;, new java.util.Vector())
        row.addItem(new IntegerProperty(headers[0], parts[0] as int))
        row.addItem(new IntegerProperty(headers[1], parts[1] as int))
        row.addItem(new IntegerProperty(headers[2], parts[2] as int))
        row.addItem(new IntegerProperty(headers[3], parts[3] as int))
        row.addItem(new IntegerProperty(headers[4], parts[4] as int))
        schedule.addItem(row)
    }
}

// ✅ Apply schedule directly to current TG
def tg = ctx.getThreadGroup()
if (tg instanceof UltimateThreadGroup) {
    tg.setData(schedule)
    log.info(&quot;✅ UTG load profile applied with ${schedule.size()} rows from $csvPath&quot;)
} else {
    log.warn(&quot;⚠️ Not running inside UltimateThreadGroup, skipping load profile&quot;)
}</stringProp>
          <stringProp name="scriptLanguage">groovy</stringProp>
        </JSR223Sampler>
        <hashTree/>
      </hashTree>
      <kg.apc.jmeter.threads.UltimateThreadGroup guiclass="kg.apc.jmeter.threads.UltimateThreadGroupGui" testclass="kg.apc.jmeter.threads.UltimateThreadGroup" testname="Maintain Variable Concurrency">
        <collectionProp name="ultimatethreadgroupdata">
          <collectionProp name="36654222">
            <stringProp name="10">10</stringProp>
            <stringProp name="0">0</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="60">60</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
          <collectionProp name="-1170058850">
            <stringProp name="20">20</stringProp>
            <stringProp name="90">90</stringProp>
            <stringProp name="30">30</stringProp>
            <stringProp name="60">60</stringProp>
            <stringProp name="10">10</stringProp>
          </collectionProp>
        </collectionProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <intProp name="LoopController.loops">-1</intProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <stringProp name="TestPlan.comments">This group starts concurrent queries and then adds additional concurrent queries as per each row. For each row it also shuts down threads i.e reduces concurrenly. The graph shows the cumulative queries of each row. </stringProp>
      </kg.apc.jmeter.threads.UltimateThreadGroup>
      <hashTree>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor - EOF detection" enabled="true">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">def query = vars.get(&quot;QUERY&quot;)
log.info(&quot;🧪 QUERY check at iteration: QUERY_ALIAS = &quot; + vars.get(&quot;QUERY_ALIAS&quot;) + &quot;, QUERY = &quot; + vars.get(&quot;QUERY&quot;))

if (&quot;false&quot;.equals(props.get(&quot;RECYCLE_ON_EOF&quot;)) &amp;&amp; (query == null || query.trim().equalsIgnoreCase(&quot;&lt;EOF&gt;&quot;))) {
    synchronized (props) {
        def finished = (props.get(&quot;threads.finished&quot;) ?: &quot;0&quot;) as int
        finished++
        props.put(&quot;threads.finished&quot;, finished.toString())
        log.info(&quot;🛑 EOF reached BEFORE JDBC execution. Finished: $finished / ${props.get(&apos;CONCURRENT_QUERY_COUNT&apos;)}&quot;)

        def required = (props.get(&quot;CONCURRENT_QUERY_COUNT&quot;) ?: &quot;1&quot;) as int
        if (finished &gt;= required &amp;&amp; !props.containsKey(&quot;EOF_STOPPING&quot;)) {
            props.put(&quot;EOF_STOPPING&quot;, &quot;true&quot;) // prevent double execution

            def delayMs = (props.get(&quot;EOF_STOP_DELAY_MS&quot;) ?: &quot;2000&quot;) as int
            log.info(&quot;✅ All threads hit EOF. Starting async stop thread with ${delayMs}ms delay...&quot;)

            // 🧵 Create a background thread to delay stopTest
            Thread.start {
                try {
                    Thread.sleep(delayMs)
                    log.info(&quot;🛑 Proceeding to stop test after delay.&quot;)
                    org.apache.jmeter.engine.StandardJMeterEngine.stopEngine()
                } catch (InterruptedException ie) {
                    log.warn(&quot;⚠️ Stop delay thread was interrupted&quot;, ie)
                }
            }
        }
    }

    // Stop this thread
    throw new org.apache.jorphan.util.JMeterStopThreadException(&quot;EOF Reached - skipping JDBC&quot;)
}</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JSR223PreProcessor guiclass="TestBeanGUI" testclass="JSR223PreProcessor" testname="JSR223 PreProcessor" enabled="false">
          <stringProp name="scriptLanguage">groovy</stringProp>
          <stringProp name="parameters"></stringProp>
          <stringProp name="filename"></stringProp>
          <stringProp name="cacheKey">true</stringProp>
          <stringProp name="script">import kg.apc.jmeter.threads.UltimateThreadGroup
import org.apache.jmeter.testelement.property.CollectionProperty
import org.apache.jmeter.testelement.property.IntegerProperty

// Read from file path, can be passed via -q or vars
def csvPath = vars.get(&quot;UTG_LOAD_PROFILE&quot;) ?: &quot;test_properties/utg_load_profile.csv&quot;
csvPath = csvPath.replaceAll(/^[&quot;&apos;]|[&quot;&apos;]$/, &apos;&apos;).trim()

def file = new File(csvPath)
if (!file.exists()) {
    log.error(&quot;❌ CSV file not found: $csvPath&quot;)
    return
}

def lines = file.readLines()
def headers = lines[0].split(&quot;,&quot;).collect { it.trim() }

def schedule = new CollectionProperty(&quot;UltimateThreadGroup.schedule&quot;, new java.util.Vector())

lines.drop(1).eachWithIndex { line, idx -&gt;
    def parts = line.split(&quot;,&quot;).collect { it.trim() }
    if (parts.size() == 5) {
        def row = new CollectionProperty(&quot;row${idx}&quot;, new java.util.Vector())
        row.addItem(new IntegerProperty(headers[0], parts[0] as int))
        row.addItem(new IntegerProperty(headers[1], parts[1] as int))
        row.addItem(new IntegerProperty(headers[2], parts[2] as int))
        row.addItem(new IntegerProperty(headers[3], parts[3] as int))
        row.addItem(new IntegerProperty(headers[4], parts[4] as int))
        schedule.addItem(row)
    }
}

def tg = ctx.getThreadGroup()
if (tg instanceof UltimateThreadGroup) {
    tg.setData(schedule)
    log.info(&quot;✅ UTG load profile applied with ${schedule.size()} rows from $csvPath&quot;)
} else {
    log.warn(&quot;⚠️ Not running inside UltimateThreadGroup, skipping load profile&quot;)
}</stringProp>
        </JSR223PreProcessor>
        <hashTree/>
        <JDBCSampler guiclass="TestBeanGUI" testclass="JDBCSampler" testname="${QUERY_ALIAS}" enabled="true">
          <stringProp name="dataSource">jdbcConfig</stringProp>
          <stringProp name="query">${QUERY}</stringProp>
          <stringProp name="queryArguments"></stringProp>
          <stringProp name="queryArgumentsTypes"></stringProp>
          <stringProp name="queryType">Select Statement</stringProp>
          <stringProp name="resultVariable">result</stringProp>
          <stringProp name="variableNames">col1</stringProp>
          <stringProp name="queryTimeout">${QUERY_TIMEOUT}</stringProp>
          <stringProp name="resultSetMaxRows">${LIMIT_RESULTSET}</stringProp>
          <stringProp name="resultSetHandler">Store as Object</stringProp>
        </JDBCSampler>
        <hashTree/>
      </hashTree>
      <PostThreadGroup guiclass="PostThreadGroupGui" testclass="PostThreadGroup" testname="tearDown Thread Group" enabled="false">
        <intProp name="ThreadGroup.num_threads">1</intProp>
        <intProp name="ThreadGroup.ramp_time">1</intProp>
        <boolProp name="ThreadGroup.same_user_on_next_iteration">true</boolProp>
        <stringProp name="ThreadGroup.on_sample_error">continue</stringProp>
        <elementProp name="ThreadGroup.main_controller" elementType="LoopController" guiclass="LoopControlPanel" testclass="LoopController" testname="Loop Controller">
          <stringProp name="LoopController.loops">1</stringProp>
          <boolProp name="LoopController.continue_forever">false</boolProp>
        </elementProp>
      </PostThreadGroup>
      <hashTree/>
      <ResultCollector guiclass="ViewResultsFullVisualizer" testclass="ResultCollector" testname="View Results Tree">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
      </ResultCollector>
      <hashTree/>
      <kg.apc.jmeter.vizualizers.CorrectedResultCollector guiclass="kg.apc.jmeter.vizualizers.ThreadsStateOverTimeGui" testclass="kg.apc.jmeter.vizualizers.CorrectedResultCollector" testname="jp@gc - Active Threads Over Time" enabled="true">
        <boolProp name="ResultCollector.error_logging">false</boolProp>
        <objProp>
          <name>saveConfig</name>
          <value class="SampleSaveConfiguration">
            <time>true</time>
            <latency>true</latency>
            <timestamp>true</timestamp>
            <success>true</success>
            <label>true</label>
            <code>true</code>
            <message>true</message>
            <threadName>true</threadName>
            <dataType>true</dataType>
            <encoding>false</encoding>
            <assertions>true</assertions>
            <subresults>true</subresults>
            <responseData>false</responseData>
            <samplerData>false</samplerData>
            <xml>false</xml>
            <fieldNames>true</fieldNames>
            <responseHeaders>false</responseHeaders>
            <requestHeaders>false</requestHeaders>
            <responseDataOnError>false</responseDataOnError>
            <saveAssertionResultsFailureMessage>true</saveAssertionResultsFailureMessage>
            <assertionsResultsToSave>0</assertionsResultsToSave>
            <bytes>true</bytes>
            <sentBytes>true</sentBytes>
            <url>true</url>
            <threadCounts>true</threadCounts>
            <idleTime>true</idleTime>
            <connectTime>true</connectTime>
          </value>
        </objProp>
        <stringProp name="filename"></stringProp>
        <longProp name="interval_grouping">500</longProp>
        <boolProp name="graph_aggregated">false</boolProp>
        <stringProp name="include_sample_labels"></stringProp>
        <stringProp name="exclude_sample_labels"></stringProp>
        <stringProp name="start_offset"></stringProp>
        <stringProp name="end_offset"></stringProp>
        <boolProp name="include_checkbox_state">false</boolProp>
        <boolProp name="exclude_checkbox_state">false</boolProp>
      </kg.apc.jmeter.vizualizers.CorrectedResultCollector>
      <hashTree/>
    </hashTree>
  </hashTree>
</jmeterTestPlan>
